[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "githound"
dynamic = ["version"]
description = "Advanced Git repository analysis and search tool with MCP server capabilities"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "GitHound Contributors"},
]
keywords = ["git", "analysis", "search", "mcp", "repository"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "ripgrepy",
    "GitPython",
    "typer",
    "pydantic>=2.0.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "rapidfuzz>=3.0.0",
    "redis>=4.5.0",
    "diskcache>=5.6.0",
    "pandas>=2.0.0",
    "websockets>=11.0.0",
    "rich>=13.0.0",
    "PyYAML>=6.0.0",
    "fastmcp>=2.11.0",
]

[project.scripts]
githound = "githound.cli:app"

[tool.mypy]
python_version = "3.12"
# Enhanced strict typing configuration
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
strict_equality = true

# Warning configuration
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Output configuration
show_error_codes = true
show_column_numbers = true
show_traceback = true
pretty = true

# Import handling - more specific than global ignore
ignore_missing_imports = false
follow_imports = "normal"

# Plugin configuration
plugins = ["pydantic.mypy"]

# Namespace packages for proper test isolation
namespace_packages = true
explicit_package_bases = true

# Exclude patterns - tests are included for type checking per CI requirements
exclude = [
    "build/",
    "githound.egg-info/",
    "examples/",
    "scripts/",
    "docs/",
    "venv/",
    ".venv/",
    "__pycache__/",
    "node_modules/",
    "tests/conftest.py"
]

# Module-specific overrides for external dependencies without type stubs
# Note: Only include modules that are actually imported in type-checked code
[[tool.mypy.overrides]]
module = [
    "git.*",  # GitPython uses 'git' as module name
    "pytest.*",
    "pytest_asyncio.*",
    "pytest_benchmark.*",
    "playwright.*",
    "slowapi.*",
    "aiohttp.*",
    "jwt.*",
    "passlib.*",
    "eunomia_mcp.*",
    "permit_fastmcp.*"
]
ignore_missing_imports = true

# All GitHound modules use strict typing (verified to pass)
[[tool.mypy.overrides]]
module = [
    "githound.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
strict_optional = true
warn_return_any = true

# Test files can be less strict due to pytest fixtures and optional dependencies
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "githound.web.tests.*",
    "githound.web.tests.conftest"
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
ignore_missing_imports = true

# Web API modules with rate limiting decorators (slowapi) can have untyped decorators
[[tool.mypy.overrides]]
module = [
    "githound.web.apis.*",
    "githound.web.main",
    "githound.mcp.server"
]
disallow_untyped_decorators = false




# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "F403",  # `from module import *` used; unable to detect undefined names
    "F405",  # name may be undefined, or defined from star imports
    "F841",  # Local variable assigned but never used (too noisy in tests/examples)
    "B007",  # Loop control variable not used (too noisy in tests/examples)
    "F821",  # Undefined name (handled by mypy)
    "E402",  # Module level import not at top (too strict for scripts)
    "UP028",  # Replace yield over for loop with yield from (minor)
    "E722",  # Do not use bare except (too strict for utility scripts)
    "E741",  # Ambiguous variable name (minor)
    "B017",  # pytest.raises(Exception) (acceptable in tests)
    "C401",  # Unnecessary generator (minor)
    "E711",  # Comparison to None (minor)
    "N802",  # Function name should be lowercase (mock functions)
    "N801",  # Class name should use CapWords (minor)
    "N818",  # Exception name should be named with an Error suffix (minor)
    "C414",  # Unnecessary list call within sorted() (minor)
    "UP007",  # Use X | Y for type annotations (Python 3.10+ syntax)
    "B023",  # Function definition does not bind loop variable (utility scripts)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["N802", "N803", "N806", "F841", "B007", "F821", "E402", "UP028", "B017", "C401", "F401", "E711", "E722"]
"scripts/*" = ["F841", "B007", "F821", "E402", "UP028", "N802", "N801", "N817", "F401", "E722", "E741"]
"examples/*" = ["F841", "B007", "F821", "E402", "UP028", "N802", "N801", "F401"]
"mock_rapidfuzz.py" = ["N802"]
"remove_shebangs*.py" = ["E722"]

# Black configuration for code formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration for import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=githound",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
    "--cov-branch",
    "-v",
    "--tb=short",
    "--ignore=examples",
    "--ignore=build",
    "--ignore=dist",
    "--ignore=.eggs",
    "--maxfail=10",
    "--durations=10",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "benchmark: marks tests as benchmark tests",
    "asyncio: marks tests as async tests",
    "mcp: marks tests related to MCP server functionality",
    "api: marks tests related to API functionality",
    "cli: marks tests related to CLI functionality",
    "git: marks tests related to git operations",
    "search: marks tests related to search functionality",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pydantic.*",
    "ignore::UserWarning:httpx.*",
    "ignore::pytest.PytestUnknownMarkWarning",
    "ignore::ResourceWarning",
    "ignore::UserWarning:pandas.*",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Coverage configuration
[tool.coverage.run]
source = ["githound"]
omit = [
    "tests/*",
    "examples/*",
    "*/migrations/*",
    "*/__pycache__/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Hatch build configuration
[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "githound/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["githound"]
include = [
    "githound/web/static/**/*",
    "githound/web/templates/**/*",
]

[tool.hatch.build.targets.sdist]
include = [
    "/githound",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
    "/githound/web/static/**/*",
    "/githound/web/templates/**/*",
]
exclude = [
    "/.git",
    "/.pytest_cache",
    "/.mypy_cache",
    "/.ruff_cache",
    "/build",
    "/dist",
    "/__pycache__",
    "*.pyc",
]

[dependency-groups]
dev = [
    "mypy>=1.0.0",
    "pandas-stubs>=2.3.0.250703",
    "types-pyyaml>=6.0.12.20250809",
    "types-psutil>=6.1.0.20241106",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "types-requests>=2.32.4.20250809",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.0.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
    "playwright>=1.40.0",
    "pytest-playwright>=0.4.0",
    "axe-playwright-python>=0.1.5",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
build = [
    "build>=0.10.0",
    "twine>=4.0.0",
    "hatchling>=1.18.0",
]

# PR Automation Workflow
# Handles automatic labeling, size detection, and other PR automation tasks

name: PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-automation:
    name: PR Automation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-label based on files changed
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

      - name: Calculate PR size
        id: pr-size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            let additions = 0;
            let deletions = 0;
            let changedFiles = files.length;

            files.forEach(file => {
              additions += file.additions;
              deletions += file.changes;
            });

            const totalChanges = additions + deletions;
            let sizeLabel = '';

            if (totalChanges < 10) {
              sizeLabel = 'size/XS';
            } else if (totalChanges < 30) {
              sizeLabel = 'size/S';
            } else if (totalChanges < 100) {
              sizeLabel = 'size/M';
            } else if (totalChanges < 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }

            // Remove existing size labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const sizeLabels = currentLabels.filter(label => 
              label.name.startsWith('size/')
            );

            for (const label of sizeLabels) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: label.name,
              });
            }

            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel],
            });

            return {
              size: sizeLabel,
              changes: totalChanges,
              files: changedFiles,
              additions: additions,
              deletions: deletions
            };

      - name: Check for breaking changes
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const body = context.payload.pull_request.body || '';
            
            const breakingKeywords = [
              'breaking change',
              'breaking:',
              'BREAKING CHANGE',
              'breaking-change',
              'üí•'
            ];
            
            const hasBreakingChange = breakingKeywords.some(keyword => 
              title.includes(keyword.toLowerCase()) || 
              body.toLowerCase().includes(keyword.toLowerCase())
            );
            
            if (hasBreakingChange) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['breaking-change', 'major'],
              });
            }

      - name: Check for security changes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const securityFiles = files.filter(file => 
              file.filename.includes('security') ||
              file.filename.includes('.github/workflows') ||
              file.filename.includes('dependabot') ||
              file.filename.includes('requirements') ||
              file.filename.includes('pyproject.toml')
            );

            if (securityFiles.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['security'],
              });
            }

      - name: Welcome first-time contributors
        uses: actions/first-interaction@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pr-message: |
            üëã Welcome to GitHound! Thank you for your first contribution!
            
            A few things to note:
            - Please make sure all CI checks pass
            - If you need help, feel free to ask questions in the comments
            - Our maintainers will review your PR as soon as possible
            
            Thanks for helping make GitHound better! üöÄ

      - name: Request review for large PRs
        if: contains(steps.pr-size.outputs.size, 'XL')
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.createReviewRequest({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: ['AstroAir'],
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ö†Ô∏è This is a large PR with significant changes. Please consider:
              
              - Breaking it into smaller, focused PRs if possible
              - Providing detailed testing instructions
              - Adding comprehensive tests for new functionality
              - Updating documentation as needed
              
              A maintainer will review this carefully.`
            });

  conflict-detection:
    name: Conflict Detection
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Check for merge conflicts
        uses: eps1lon/actions-label-merge-conflict@v3
        with:
          dirtyLabel: "merge-conflict"
          removeOnDirtyLabel: "ready-to-merge"
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          commentOnDirty: |
            This pull request has merge conflicts that need to be resolved.
            
            Please resolve the conflicts and push the changes to continue.
            
            You can resolve conflicts by:
            1. Pulling the latest changes from the target branch
            2. Resolving conflicts in your local environment
            3. Pushing the resolved changes
            
            Or use GitHub's web interface to resolve simple conflicts.
          commentOnClean: |
            ‚úÖ Merge conflicts have been resolved. Thank you!

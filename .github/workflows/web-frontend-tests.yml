name: Web Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'githound/web/**'
      - 'githound/web/tests/**'
      - '.github/workflows/web-frontend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'githound/web/**'
      - 'githound/web/tests/**'
      - '.github/workflows/web-frontend-tests.yml'

env:
  TESTING: true
  JWT_SECRET_KEY: test-secret-key-for-testing-only
  REDIS_URL: redis://localhost:6379/15
  GITHOUND_LOG_LEVEL: WARNING

jobs:
  web-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        python-version: ['3.11', '3.12']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,docs,build]"

    - name: Install Playwright
      run: |
        pip install playwright pytest-playwright
        playwright install ${{ matrix.browser }}
        playwright install-deps

    - name: Create test directories
      run: |
        mkdir -p test-results/screenshots
        mkdir -p test-results/videos
        mkdir -p test-results/traces

    - name: Run linting and type checks
      run: |
        make quality

    - name: Run unit tests
      run: |
        pytest tests/ -m "unit and not slow" --cov=githound.web --cov-report=xml:test-results/coverage-unit.xml

    - name: Start test services
      run: |
        # Start any additional services needed for testing
        echo "Test services started"

    - name: Run Playwright tests - ${{ matrix.browser }}
      run: |
        cd githound/web/tests
        playwright test --project=${{ matrix.browser }} --reporter=html:test-results/playwright-report-${{ matrix.browser }} --reporter=junit:test-results/playwright-results-${{ matrix.browser }}.xml
      env:
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
        RECORD_VIDEO: true

    - name: Run integration tests
      run: |
        pytest githound/web/tests/ -m "integration" --browser=${{ matrix.browser }} --html=test-results/integration-report-${{ matrix.browser }}.html

    - name: Run performance tests
      if: matrix.browser == 'chromium'  # Only run performance tests on Chromium
      run: |
        pytest githound/web/tests/ -m "performance" --browser=chromium --html=test-results/performance-report.html

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.browser }}-py${{ matrix.python-version }}
        path: |
          test-results/
          githound/web/tests/test-results/
        retention-days: 30

    - name: Upload coverage to Codecov
      if: matrix.browser == 'chromium' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: test-results/coverage-unit.xml
        flags: web-frontend
        name: web-frontend-coverage

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Web Frontend Tests (${{ matrix.browser }}, Python ${{ matrix.python-version }})
        path: 'test-results/*-results*.xml'
        reporter: java-junit

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: web-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install playwright pytest-playwright axe-playwright

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps

    - name: Run accessibility tests
      run: |
        pytest githound/web/tests/ -m "ui" -k "accessibility" --html=test-results/accessibility-report.html

    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-test-results
        path: test-results/accessibility-report.html

  cross-browser-compatibility:
    runs-on: ubuntu-latest
    needs: web-tests
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install playwright pytest-playwright

    - name: Install Playwright browsers
      run: |
        playwright install ${{ matrix.browser }}
        playwright install-deps

    - name: Run cross-browser tests
      run: |
        cd githound/web/tests
        playwright test --project=${{ matrix.browser }} --grep="@cross-browser" --reporter=html:test-results/cross-browser-${{ matrix.browser }}

    - name: Upload cross-browser results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cross-browser-results-${{ matrix.browser }}
        path: githound/web/tests/test-results/

  mobile-tests:
    runs-on: ubuntu-latest
    needs: web-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install playwright pytest-playwright

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps

    - name: Run mobile responsiveness tests
      run: |
        cd githound/web/tests
        playwright test --project="Mobile Chrome" --project="Mobile Safari" --reporter=html:test-results/mobile-report

    - name: Upload mobile test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mobile-test-results
        path: githound/web/tests/test-results/

  security-tests:
    runs-on: ubuntu-latest
    needs: web-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install playwright pytest-playwright

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps

    - name: Run security tests
      run: |
        pytest githound/web/tests/ -m "security" --html=test-results/security-report.html

    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: test-results/security-report.html

  test-summary:
    runs-on: ubuntu-latest
    needs: [web-tests, accessibility-tests, cross-browser-compatibility, mobile-tests, security-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "# Web Frontend Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "- Web Tests: ${{ needs.web-tests.result }}" >> test-summary.md
        echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-summary.md
        echo "- Cross-browser Tests: ${{ needs.cross-browser-compatibility.result }}" >> test-summary.md
        echo "- Mobile Tests: ${{ needs.mobile-tests.result }}" >> test-summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Artifacts" >> test-summary.md
        echo "Test results and reports are available in the workflow artifacts." >> test-summary.md

    - name: Comment PR with test summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md

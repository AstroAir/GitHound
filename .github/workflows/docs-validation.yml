# Documentation Validation Workflow
# Comprehensive validation of GitHound documentation

name: Documentation Validation

on:
  push:
    paths:
      - 'docs/**'
      - '*.md'
      - 'scripts/validate_*.py'
      - 'scripts/validation-config.yaml'
      - '.markdownlint.json'
      - 'mkdocs.yml'
  pull_request:
    paths:
      - 'docs/**'
      - '*.md'
      - 'scripts/validate_*.py'
      - 'scripts/validation-config.yaml'
      - '.markdownlint.json'
      - 'mkdocs.yml'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      skip_external:
        description: 'Skip external link validation'
        required: false
        default: 'false'
        type: boolean
      full_validation:
        description: 'Run full validation including legacy scripts'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  FORCE_COLOR: "1"

permissions:
  contents: read

jobs:
  # Quick validation for fast feedback
  quick-validation:
    name: Quick Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          pip install pyyaml

      - name: Run quick validation
        run: |
          python scripts/validate_documentation.py --skip-external

  # Markdownlint validation
  markdownlint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: markdownlint "**/*.md" --config .markdownlint.json

  # Comprehensive validation
  comprehensive-validation:
    name: Comprehensive Documentation Validation
    runs-on: ubuntu-latest
    needs: [quick-validation, markdownlint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs,dev]"
          pip install pyyaml

      - name: Run comprehensive validation
        run: |
          SKIP_EXTERNAL="${{ github.event.inputs.skip_external || 'true' }}"
          if [ "$SKIP_EXTERNAL" = "true" ]; then
            python scripts/validate_all_docs.py --skip-external
          else
            python scripts/validate_all_docs.py
          fi

      - name: Run legacy validation scripts
        if: github.event.inputs.full_validation == 'true' || github.event.inputs.full_validation == ''
        run: |
          echo "Running legacy validation scripts for comparison..."
          python scripts/validate_links.py || echo "Legacy link validation completed with issues"
          python scripts/validate_docs_examples.py || echo "Legacy example validation completed with issues"
          python scripts/validate_config_examples.py || echo "Legacy config validation completed with issues"

  # Documentation build test
  build-test:
    name: Documentation Build Test
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build documentation
        run: |
          cd docs && mkdocs build --strict

      - name: Upload documentation build
        uses: actions/upload-artifact@v4
        with:
          name: documentation-build
          path: docs/site/
          retention-days: 7

  # External link validation (separate job for better control)
  external-links:
    name: External Link Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_external != 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          pip install pyyaml

      - name: Validate external links
        run: |
          python scripts/validate_documentation.py --config scripts/validation-config.yaml

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: external-link-validation-report
          path: validation-report.json
          retention-days: 30

  # Template validation
  template-validation:
    name: Template Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Validate documentation templates
        run: |
          echo "Validating documentation templates..."
          # Check that templates exist and are properly formatted
          for template in docs/templates/*.md; do
            if [ -f "$template" ]; then
              echo "Validating template: $template"
              # Basic validation - check for required sections
              if ! grep -q "<!-- Template Notes:" "$template"; then
                echo "Warning: $template missing template notes"
              fi
            fi
          done

  # Summary job
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, markdownlint, comprehensive-validation, build-test, template-validation]
    if: always()
    steps:
      - name: Check validation results
        run: |
          echo "Documentation Validation Summary:"
          echo "================================="

          # Check job results
          QUICK_RESULT="${{ needs.quick-validation.result }}"
          LINT_RESULT="${{ needs.markdownlint.result }}"
          COMPREHENSIVE_RESULT="${{ needs.comprehensive-validation.result }}"
          BUILD_RESULT="${{ needs.build-test.result }}"
          TEMPLATE_RESULT="${{ needs.template-validation.result }}"

          echo "Quick Validation: $QUICK_RESULT"
          echo "Markdown Linting: $LINT_RESULT"
          echo "Comprehensive Validation: $COMPREHENSIVE_RESULT"
          echo "Build Test: $BUILD_RESULT"
          echo "Template Validation: $TEMPLATE_RESULT"

          # Determine overall status
          if [[ "$QUICK_RESULT" == "success" && "$LINT_RESULT" == "success" &&
                "$COMPREHENSIVE_RESULT" == "success" && "$BUILD_RESULT" == "success" &&
                "$TEMPLATE_RESULT" == "success" ]]; then
            echo ""
            echo "✅ All documentation validation checks passed!"
            exit 0
          else
            echo ""
            echo "❌ Some documentation validation checks failed."
            echo "Please review the job outputs above for details."
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Documentation validation failed. Please check the workflow logs for details and fix any issues before merging.'
            })

      - name: Comment on PR success
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All documentation validation checks passed!'
            })

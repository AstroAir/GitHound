# Staging Deployment Workflow
# Deploys to staging environment for testing before production

name: Staging Deployment

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]
    types: [ labeled ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - preview
      ref:
        description: 'Git ref to deploy'
        required: false
        default: 'develop'

permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  # Only run staging deployment for specific conditions
  check-deployment:
    name: Check Deployment Conditions
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - name: Check deployment conditions
        id: check
        run: |
          SHOULD_DEPLOY=false
          ENVIRONMENT="staging"
          
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            SHOULD_DEPLOY=true
            ENVIRONMENT="staging"
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ contains(github.event.label.name, 'deploy-preview') }}" = "true" ]; then
            SHOULD_DEPLOY=true
            ENVIRONMENT="preview"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SHOULD_DEPLOY=true
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  # Build and test before deployment
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: check-deployment
    if: needs.check-deployment.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run quick tests
        run: |
          pytest tests/test_*.py -x --tb=short

      - name: Build package
        run: |
          pip install build
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-build
          path: dist/
          retention-days: 7

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to ${{ needs.check-deployment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [check-deployment, pre-deploy]
    if: needs.check-deployment.outputs.should_deploy == 'true'
    environment: 
      name: ${{ needs.check-deployment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: staging-build
          path: dist/

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.check-deployment.outputs.environment }}',
              description: 'Deploying to ${{ needs.check-deployment.outputs.environment }}',
              auto_merge: false,
              required_contexts: []
            });
            
            return deployment.data.id;

      - name: Set deployment status to in progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment in progress'
            });

      - name: Deploy to staging
        id: deploy
        run: |
          # Simulate deployment process
          echo "🚀 Deploying GitHound to ${{ needs.check-deployment.outputs.environment }}..."
          
          # In a real scenario, this would:
          # 1. Deploy to a staging server
          # 2. Update configuration
          # 3. Run database migrations
          # 4. Start services
          # 5. Run health checks
          
          # For now, we'll simulate this
          sleep 10
          
          # Set deployment URL based on environment
          if [ "${{ needs.check-deployment.outputs.environment }}" = "staging" ]; then
            DEPLOY_URL="https://staging.githound.dev"
          else
            DEPLOY_URL="https://pr-${{ github.event.number }}.githound.dev"
          fi
          
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "✅ Deployment completed successfully"
          echo "🌐 Available at: $DEPLOY_URL"

      - name: Run deployment tests
        run: |
          echo "🧪 Running deployment verification tests..."
          
          # In a real scenario, this would run:
          # - Health check endpoints
          # - Smoke tests
          # - Integration tests against the deployed environment
          
          # Simulate tests
          sleep 5
          echo "✅ All deployment tests passed"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Deployment successful',
              environment_url: '${{ steps.deploy.outputs.url }}'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed'
            });

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.url }}';
            const environment = '${{ needs.check-deployment.outputs.environment }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🚀 **Deployment to ${environment} Complete**
              
              Your changes have been deployed to the ${environment} environment:
              
              **🌐 Preview URL:** ${deploymentUrl}
              
              **📋 Deployment Details:**
              - Environment: \`${environment}\`
              - Commit: \`${context.sha.substring(0, 7)}\`
              - Deployed at: ${new Date().toISOString()}
              
              **🧪 Testing:**
              Please test your changes in the ${environment} environment and report any issues.
              
              The deployment will be automatically cleaned up when the PR is closed.`
            });

  # Cleanup preview deployments when PR is closed
  cleanup-preview:
    name: Cleanup Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Cleanup preview environment
        run: |
          echo "🧹 Cleaning up preview deployment for PR #${{ github.event.number }}"
          # In a real scenario, this would:
          # - Stop services
          # - Remove deployed artifacts
          # - Clean up databases
          # - Remove DNS entries
          echo "✅ Preview environment cleaned up"

      - name: Comment cleanup
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🧹 **Preview Environment Cleaned Up**
              
              The preview deployment for this PR has been automatically cleaned up.
              
              Thank you for your contribution! 🎉`
            });

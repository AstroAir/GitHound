# GitHound CI/CD Pipeline
# Comprehensive testing and deployment workflow with intelligent optimizations

name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  FORCE_COLOR: "1"  # Force colored output in CI
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

# Global permissions for security
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Detect changes to optimize job execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python-code: ${{ steps.changes.outputs.python-code }}
      docs: ${{ steps.changes.outputs.docs }}
      workflows: ${{ steps.changes.outputs.workflows }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python-code:
              - 'githound/**/*.py'
              - 'tests/**/*.py'
              - 'scripts/**/*.py'
            docs:
              - 'docs/**/*'
              - 'README.md'
              - 'mkdocs.yml'
            workflows:
              - '.github/workflows/**'
            dependencies:
              - 'pyproject.toml'
              - 'requirements.txt'
              - 'uv.lock'

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python-code == 'true' || needs.changes.outputs.workflows == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache tool caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/mypy
            ~/.cache/ruff
            ~/.cache/black
          key: ${{ runner.os }}-tools-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-tools-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-tools-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run code formatting check
        run: |
          black --check --diff githound tests

      - name: Run import sorting check
        run: |
          isort --check-only --diff githound tests

      - name: Run linting
        run: |
          ruff check githound tests --output-format=github

      - name: Run type checking (source + tests)
        run: |
          mypy githound tests --config-file pyproject.toml --no-incremental --show-error-codes

  # Unit tests across multiple Python versions
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.python-code == 'true' || needs.changes.outputs.dependencies == 'true' || needs.changes.outputs.workflows == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        exclude:
          # Reduce matrix for faster feedback on PRs
          - os: macos-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.11"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.pytest_cache
          key: ${{ runner.os }}-${{ matrix.python-version }}-test-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-test-
            ${{ runner.os }}-test-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        run: |
          pytest tests/test_*.py -v --tb=short --maxfail=5

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short --maxfail=3
        continue-on-error: true  # Integration tests may fail due to environment

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            .pytest_cache/
            test-results.xml
          retention-days: 7

  # Coverage reporting
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [changes, quality]
    if: needs.changes.outputs.python-code == 'true' || needs.changes.outputs.workflows == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache coverage dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .coverage
          key: ${{ runner.os }}-coverage-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-coverage-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-coverage-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run tests with coverage
        run: |
          pytest --cov=githound --cov-report=xml --cov-report=html tests/test_*.py

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        if: github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 85
          MINIMUM_ORANGE: 70

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.python-code == 'true' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache benchmark dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .benchmarks
          key: ${{ runner.os }}-benchmark-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-benchmark-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-benchmark-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run benchmarks
        run: |
          pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.json
          retention-days: 90
        if: always()

      - name: Performance regression check
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '150%'
          fail-on-alert: false

  # Security checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python-code == 'true' || needs.changes.outputs.dependencies == 'true' || needs.changes.outputs.workflows == 'true'
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/safety
          key: ${{ runner.os }}-security-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-security-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-security-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit[toml] semgrep

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run bandit security scan
        run: |
          bandit -r githound -f json -o bandit-report.json -ll
        continue-on-error: true

      - name: Convert bandit to SARIF
        run: |
          python -c "
          import json
          import sys

          # Convert bandit JSON to SARIF format for GitHub Security tab
          with open('bandit-report.json', 'r') as f:
              bandit_data = json.load(f)

          sarif = {
              'version': '2.1.0',
              'runs': [{
                  'tool': {
                      'driver': {
                          'name': 'bandit',
                          'version': '1.0.0'
                      }
                  },
                  'results': []
              }]
          }

          for result in bandit_data.get('results', []):
              sarif['runs'][0]['results'].append({
                  'ruleId': result.get('test_id', 'unknown'),
                  'message': {'text': result.get('issue_text', 'Security issue detected')},
                  'locations': [{
                      'physicalLocation': {
                          'artifactLocation': {'uri': result.get('filename', 'unknown')},
                          'region': {'startLine': result.get('line_number', 1)}
                      }
                  }],
                  'level': 'warning' if result.get('issue_severity', 'MEDIUM') == 'LOW' else 'error'
              })

          with open('bandit.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          "
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit.sarif
          category: bandit

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            bandit.sarif
          retention-days: 30
        if: always()

  # Build package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [changes, quality, test]
    if: needs.changes.outputs.python-code == 'true' || needs.changes.outputs.dependencies == 'true' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            build/
          key: ${{ runner.os }}-build-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-build-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import githound; print(f'GitHound version: {githound.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 90

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true' || needs.changes.outputs.python-code == 'true' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache documentation dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            docs/.cache
          key: ${{ runner.os }}-docs-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml', 'mkdocs.yml') }}
          restore-keys: |
            ${{ runner.os }}-docs-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-docs-

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build documentation
        run: |
          cd docs && mkdocs build --strict

      - name: Test documentation links
        run: |
          # Install link checker
          pip install linkchecker
          # Check internal links in built documentation
          linkchecker --check-extern docs/site/ || true

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/site/
          retention-days: 30

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/site/

  # Deployment (only on release)
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    permissions:
      id-token: write  # For trusted publishing
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Verify package integrity
        run: |
          ls -la dist/
          python -m pip install --upgrade pip twine
          twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          print-hash: true

  # Notification job for workflow status
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality, test, coverage, security, build, docs]
    if: always() && (failure() || cancelled())
    steps:
      - name: Notify on failure
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create issue on failure
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `CI/CD Workflow Failed - ${context.workflow}`;
            const body = `
            ## Workflow Failure Report

            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha}
            **Author:** ${context.actor}
            **Branch:** ${context.ref}

            **Failed Jobs:**
            ${JSON.stringify(context.payload, null, 2)}

            Please investigate and fix the failing workflow.

            [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('CI/CD Workflow Failed')
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'bug', 'priority-high']
              });
            }

# CodeQL Security Analysis Workflow
# Performs semantic code analysis to find security vulnerabilities

name: "CodeQL Security Analysis"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Run CodeQL analysis weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        queries: +security-and-quality
        config: |
          paths-ignore:
            - "tests/**"
            - "examples/**"
            - "docs/**"
            - "scripts/benchmark.py"
          paths:
            - "githound/**"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true

    - name: Upload CodeQL results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-results-${{ matrix.language }}
        path: /home/runner/work/_temp/codeql_databases/
        retention-days: 30

  # Additional security scanning with Semgrep
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python for Semgrep
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Semgrep
      run: |
        python -m pip install --upgrade pip
        pip install semgrep

    - name: Run Semgrep
      run: |
        semgrep scan --config=p/security-audit --config=p/secrets --config=p/python --sarif --sarif-output=semgrep.sarif --force-color
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        category: semgrep

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true

    - name: Convert to SARIF
      run: |
        python -c "
        import json
        import sys
        
        # Create SARIF format for dependency vulnerabilities
        sarif = {
            'version': '2.1.0',
            'runs': [{
                'tool': {
                    'driver': {
                        'name': 'dependency-scan',
                        'version': '1.0.0'
                    }
                },
                'results': []
            }]
        }
        
        # Process safety report
        try:
            with open('safety-report.json', 'r') as f:
                safety_data = json.load(f)
            
            for vuln in safety_data:
                sarif['runs'][0]['results'].append({
                    'ruleId': f'safety-{vuln.get(\"id\", \"unknown\")}',
                    'message': {'text': vuln.get('advisory', 'Dependency vulnerability detected')},
                    'locations': [{
                        'physicalLocation': {
                            'artifactLocation': {'uri': 'pyproject.toml'},
                            'region': {'startLine': 1}
                        }
                    }],
                    'level': 'error'
                })
        except (FileNotFoundError, json.JSONDecodeError):
            pass
        
        # Process pip-audit report
        try:
            with open('pip-audit-report.json', 'r') as f:
                audit_data = json.load(f)
            
            for vuln in audit_data.get('vulnerabilities', []):
                sarif['runs'][0]['results'].append({
                    'ruleId': f'pip-audit-{vuln.get(\"id\", \"unknown\")}',
                    'message': {'text': vuln.get('description', 'Dependency vulnerability detected')},
                    'locations': [{
                        'physicalLocation': {
                            'artifactLocation': {'uri': 'pyproject.toml'},
                            'region': {'startLine': 1}
                        }
                    }],
                    'level': 'error'
                })
        except (FileNotFoundError, json.JSONDecodeError):
            pass
        
        with open('dependency-scan.sarif', 'w') as f:
            json.dump(sarif, f, indent=2)
        "

    - name: Upload dependency SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: dependency-scan.sarif
        category: dependency-scan

    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json
          dependency-scan.sarif
        retention-days: 30

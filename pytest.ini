[pytest]
# Pytest configuration for GitHound MCP Server testing
# Following FastMCP testing best practices

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (require external services)
    performance: Performance and scalability tests
    slow: Slow tests that take significant time
    auth: Authentication and authorization tests
    http: HTTP transport tests
    fastmcp: Tests following FastMCP patterns
    mcp: MCP protocol tests

# Async testing configuration
asyncio_mode = auto

# Test output configuration
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --color=yes

# Coverage options (uncomment when pytest-cov is installed)
# --cov=githound
# --cov-report=term-missing
# --cov-report=html:htmlcov
# --cov-report=xml
# --cov-fail-under=80

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:git.*
    ignore::UserWarning:fastmcp.*

# Test timeout (in seconds) - uncomment when pytest-timeout is installed
# timeout = 300

# Parallel execution
# -n auto  # Uncomment to enable parallel testing with pytest-xdist

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test environment variables (set manually or via pytest-env plugin)
# env =
#     PYTHONPATH = .
#     TESTING = true
#     LOG_LEVEL = DEBUG

{
  "session_id": "cba5c1c9-9263-4441-a083-9cb673282ced",
  "transcript_path": "C:\\Users\\Max Qian\\.claude\\projects\\D--Project-GitHound\\cba5c1c9-9263-4441-a083-9cb673282ced.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "D:\\Project\\GitHound\\tests\\security\\test_cors_config.py",
    "content": "\"\"\"Tests for CORS configuration security.\"\"\"\n\nimport os\nfrom unittest.mock import patch\n\nimport pytest\nfrom fastapi.testclient import TestClient\n\n\nclass TestCORSConfiguration:\n    \"\"\"Test CORS configuration security.\"\"\"\n\n    def test_cors_uses_environment_variable(self):\n        \"\"\"Test that CORS origins are read from environment variable.\"\"\"\n        # Test with environment variable set\n        with patch.dict(os.environ, {\"ALLOWED_ORIGINS\": \"http://localhost:3000,https://example.com\"}):\n            # Import after setting env var\n            from githound.web.main import app\n\n            # Find the CORS middleware\n            cors_middleware = None\n            for middleware in app.user_middleware:\n                if \"CORSMiddleware\" in str(middleware.cls):\n                    cors_middleware = middleware\n                    break\n\n            assert cors_middleware is not None, \"CORS middleware not found\"\n            # Check that wildcard is not used when env var is set\n            options = cors_middleware.options\n            assert \"*\" not in options.get(\"allow_origins\", []), \"Wildcard origin should not be used with env var\"\n\n    def test_cors_default_is_localhost_only(self):\n        \"\"\"Test that CORS defaults to localhost only when no env var is set.\"\"\"\n        # Test without environment variable\n        with patch.dict(os.environ, {}, clear=True):\n            # Need to reload the module to pick up env changes\n            import importlib\n            import githound.web.main\n            importlib.reload(githound.web.main)\n\n            from githound.web.main import app\n\n            # Find the CORS middleware\n            cors_middleware = None\n            for middleware in app.user_middleware:\n                if \"CORSMiddleware\" in str(middleware.cls):\n                    cors_middleware = middleware\n                    break\n\n            assert cors_middleware is not None, \"CORS middleware not found\"\n            options = cors_middleware.options\n            allowed_origins = options.get(\"allow_origins\", [])\n\n            # Should default to localhost only\n            assert \"*\" not in allowed_origins, \"Wildcard origin should not be default\"\n            assert all(\"localhost\" in origin or \"127.0.0.1\" in origin for origin in allowed_origins), \\\n                \"Default origins should be localhost only\"\n\n    def test_cors_no_wildcard_with_credentials(self):\n        \"\"\"Test that wildcard origins are not used with credentials enabled.\"\"\"\n        from githound.web.main import app\n\n        # Find the CORS middleware\n        cors_middleware = None\n        for middleware in app.user_middleware:\n            if \"CORSMiddleware\" in str(middleware.cls):\n                cors_middleware = middleware\n                break\n\n        assert cors_middleware is not None, \"CORS middleware not found\"\n        options = cors_middleware.options\n\n        # If credentials are enabled, wildcard should not be used\n        if options.get(\"allow_credentials\", False):\n            allowed_origins = options.get(\"allow_origins\", [])\n            assert \"*\" not in allowed_origins, \\\n                \"Wildcard origins cannot be used with allow_credentials=True\"\n\n    def test_cors_rejects_unauthorized_origin(self):\n        \"\"\"Test that requests from unauthorized origins are rejected.\"\"\"\n        with patch.dict(os.environ, {\"ALLOWED_ORIGINS\": \"http://localhost:3000\"}):\n            import importlib\n            import githound.web.main\n            importlib.reload(githound.web.main)\n\n            from githound.web.main import app\n\n            client = TestClient(app)\n\n            # Request from unauthorized origin\n            response = client.get(\n                \"/\",\n                headers={\"Origin\": \"http://malicious-site.com\"}\n            )\n\n            # Should not have CORS headers for unauthorized origin\n            assert \"access-control-allow-origin\" not in [h.lower() for h in response.headers]\n\n    def test_trusted_host_uses_environment_variable(self):\n        \"\"\"Test that trusted hosts are read from environment variable.\"\"\"\n        with patch.dict(os.environ, {\"ALLOWED_HOSTS\": \"localhost,example.com\"}):\n            import importlib\n            import githound.web.main\n            importlib.reload(githound.web.main)\n\n            from githound.web.main import app\n\n            # Find the TrustedHost middleware\n            trusted_host_middleware = None\n            for middleware in app.user_middleware:\n                if \"TrustedHostMiddleware\" in str(middleware.cls):\n                    trusted_host_middleware = middleware\n                    break\n\n            assert trusted_host_middleware is not None, \"TrustedHost middleware not found\"\n            # Wildcard should not be used\n            options = trusted_host_middleware.options\n            allowed_hosts = options.get(\"allowed_hosts\", [])\n            assert \"*\" not in allowed_hosts, \"Wildcard host should not be used with env var\"\n\n\nif __name__ == \"__main__\":\n    pytest.main([__file__, \"-v\"])\n"
  }
}
